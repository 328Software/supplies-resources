<!--

-->
<project xmlns:ivy="antlib:org.apache.ivy.ant"

         name="common" basedir="." >
    <description>
        Common build scripts
    </description>
    <!--

        this build file is a self contained project:
        it requires ant 2.3 and java 1.7
    -->

    <dirname property="common.basedir" file="${ant.file.common}"/>

    <import file="${common.basedir}/local-properties.xml"/>
    <import file="${common.scripts}/macro.xml"/>
    <import file="${common.scripts}/build-junit.xml"/>
    <import file="${common.scripts}/build-os.xml"/>
    <import file="${common.scripts}/build-javadoc.xml"/>

    <target name="download-ivy" unless="skip.download">
        <mkdir dir="${ivy.jar.dir}"/>
        <echo message="installing ivy..."/>
        <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <!--
              target: install-ivy
                this target is not necessary if you put ivy.jar in your ant lib directory
    -->
    <target name="install-ivy" depends="download-ivy" description="--> install ivy">
        <!--
         try to load ivy here from local ivy dir, in case the user has not already dropped
                      it into ant's lib dir (note that the latter copy will always take precedence).
                      We will not fail as long as local lib dir exists (it may be empty) and
                      ivy is in at least one of ant's lib dir or the local lib dir.
        -->
        <install-ivy/>

        <!--only adding the below line so intellij can understand where ivy is located-->
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

    <target name="clean-repository" description="--> clean the local repository">
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${repository}" includes="**/*"/>
        </delete>
    </target>

    <target name="update-repository" depends="install-ivy" description="--> retrieve dependencies with ivy">
        <mkdir dir="${repository}"/>
        <ivy:retrieve
                pattern="${repository}/${local.artifact.pattern}"
                ivypattern="${repository}/${local.ivy.pattern}"
                conf="*"/>
    </target>

    <target name="retrieve-lib" depends="update-repository" if="compile.conf" description="--> retrieve dependencies to target lib">
        <retrieve-dependencies conf="${compile.conf}"/>
    </target>

    <target name="clean-lib" description="--> clean target lib directory">
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${lib}" erroronmissingdir="false"/>
        </delete>
    </target>

    <target name="clean-build" depends="clean-lib" description="--> clean target directory">
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${target}" erroronmissingdir="false"/>
        </delete>
    </target>

    <target name="copy-resources" description="--> copy resources to build directory">
        <copy todir="${build}">
            <fileset dir="${src.main.resources}">
                <patternset includes="**/*"/>
            </fileset>
        </copy>
    </target>

    <target name="compile" depends="clean-build,retrieve-lib,copy-resources" description="--> compile the module">
        <compile/>
    </target>

    <target name="build-jar" depends="compile" description="--> create an archive of the module">
        <build-jar/>
    </target>

    <target name="publish" depends="build-jar" description="--> publish the archive to the local repository">
        <ivy:publish resolver="local" pubrevision="${revision}" overwrite="true">
            <artifacts pattern="${pub}/[artifact].[ext]"/>
        </ivy:publish>
    </target>

</project>